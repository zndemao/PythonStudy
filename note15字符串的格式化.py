#
s = '{0} love {1},{2}'.format('l', 'your', '*')
print(s)
s = '{a} love {b},{c}'.format(a='l', b='your', c='*')
print(s)
s = '{0} love {b},{c}'.format('l', b='your', c='*')
# 位置参数 在 关键字参数 之前
print(s)
print('{{0}}'.format('不打印'))
s = '{0:.1f}{1}'.format(27.58, 'GB')
print(s)

print('%c' % 97 + '   格式化字符及ASCII码')
print('%s' % 'i love ' + '格式化字符串')
print('%d+%d=%d' % (4, 5, 4 + 5) + '    格式化整数')
print('%o' % 9 + '   格式化无符号八位数')
print('%x' % 15 + '   格式化无符号十六进制数')
print('%X' % 15 + '   格式化无符号十六进制数 大写')
print('%f' % 15.98765 + '   格式化定点数，可以指定小数的精度，默认精确六位')
print('%e' % 1 + '   用科学计数法格式化定点数')
print('%E' % 1 + '   作用同%e，用科学记数法格式化定点数')
print('%g' % 1 + '   根据值得大小决定使用%f或%e')
print('%g' % 1000000000000000000 + '   作用同%g,根据值得大小决定使用%f或%e')
print('%g' % 1 + '   根据值得大小决定使用%f或%e')
print('%G' % 1000000000000000000 + '   作用同%g,根据值得大小决定使用%f或%e')

# Python字符串的格式方法
# %c    格式化字符及ASCII码
# %s    格式化字符串
# %d    格式化整数
# %o    格式化无符号八位数
# %x    格式化无符号十六进制数
# %X    格式化无符号十六进制数 大写
# %f    格式化定点数，可以指定小数的精度,默认精确六位
# %e    用科学计数法格式化定点数
# %E    作用同%e，用科学记数法格式化定点数
# %g    根据值得大小决定使用%f或%e
# %G    作用同%g,根据值得大小决定使用%f或%e

print('格式化操作辅助命令')
print('%5.1f' % 123.456 + "    m是显示的最小总宽度，n是小数点后的位数")
print('%-10d' % 123.456 + "    用于左对齐")
print('%+d' % 123.456 + "    在正数前面加上 +")
print('%#x' % 10 + "    显示的数字前面填充 0 取代空格")
# 格式化操作辅助命令
# m.n   m是显示的最小总宽度，n是小数点后的位数
# _     用于左对齐
# +     在正数前面加上 +
# #      在八进制显示 O 十六进制前显示 Ox 或 OX
# 0     显示的数字前面填充 0 取代空格

# 转义符号
# \`    单引号
# \*    双引号
# \a    发出系统报响铃声
# \b    退格符
# \n    退格符
# \t    制表符
# \v    纵向制表符
# \r    回车符
# \f    换页符
# \o    八进制数代表符
# \x    十六进制代表符
# \0    表示哟个空字符
# \\    反斜杠
